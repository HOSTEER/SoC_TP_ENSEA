#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "sleep.h"

void Test_leds(){
	volatile uint16_t * ptrLed = (uint16_t *)(XPAR_GPIO_1_BASEADDR + 0x0008);
	*(ptrLed+0x0002)=0;//Choix d'accès au channel pour l'écriture
	*ptrLed=0x5555;//0101 0101 0101 0101
}

void sw2leds(){
	volatile uint16_t * ptrLed = (uint16_t *)(XPAR_GPIO_1_BASEADDR + 0x0008);
	volatile uint16_t * ptrSw = (uint16_t *)(XPAR_GPIO_2_BASEADDR);
	*(ptrLed+0x0002)=0;//Choix d'accès au channel pour l'écriture
	*(ptrSw+0x0002)=1;//Choix d'accès au channel pour la lecture
	*ptrLed=*ptrSw;//Les leds s'allument si un switch est à 1
}

void cheniller(){
	volatile uint16_t * ptrLed = (uint16_t *)(XPAR_GPIO_1_BASEADDR + 0x0008);
	*(ptrLed+0x0002)=0;
	static uint16_t pos=1,dir=1;
	if(pos<=0x4000&&dir){*ptrLed=pos;pos=pos<<1;}
	else if(pos>0x4000&&dir){*ptrLed=pos;pos=pos>>1;dir=0;}
	else if(pos>0x0001&&(dir==0)){*ptrLed=pos;pos=pos>>1;}
	else{*ptrLed=pos;pos=pos<<1;dir=1;}
	usleep(100000);
}

void sw2seg(){
	volatile uint16_t * ptrSw = (uint16_t *)(XPAR_AXI_GPIO_2_BASEADDR);
	volatile uint16_t * ptrSegAn = (uint16_t *)(XPAR_AXI_GPIO_0_BASEADDR + 0x008);
	volatile uint16_t * ptrSegCa = (uint16_t *)(XPAR_AXI_GPIO_1_BASEADDR);
	*(ptrSw+0x0002)=1;
	*(ptrSegAn+0x0002)=0;
	*(ptrSegCa+0x0002)=0;

	uint16_t SwData=*ptrSw;
	static uint8_t AnCounter=0;
	switch(AnCounter){
		case 0:{*ptrSegAn=0xFE;AnCounter++;SwData=(SwData&0x000F);break;}
		case 1:{*ptrSegAn=0xFD;AnCounter++;SwData=(SwData&0x00F0)>>4;break;}
		case 2:{*ptrSegAn=0xFB;AnCounter++;SwData=(SwData&0x0F00)>>8;break;}
		default:{*ptrSegAn=0xF7;AnCounter=0;SwData=(SwData&0xF000)>>12;break;}
	}
	switch(SwData){
		case 0:{*ptrSegCa=0xC0;break;}
		case 1:{*ptrSegCa=0xF9;break;}
		case 2:{*ptrSegCa=0xA4;break;}
		case 3:{*ptrSegCa=0xB0;break;}
		case 4:{*ptrSegCa=0x99;break;}
		case 5:{*ptrSegCa=0x92;break;}
		case 6:{*ptrSegCa=0x82;break;}
		case 7:{*ptrSegCa=0xF8;break;}
		case 8:{*ptrSegCa=0x80;break;}
		case 9:{*ptrSegCa=0x90;break;}
		case 10:{*ptrSegCa=0x88;break;}
		case 11:{*ptrSegCa=0x83;break;}
		case 12:{*ptrSegCa=0xC6;break;}
		case 13:{*ptrSegCa=0xA1;break;}
		case 14:{*ptrSegCa=0x86;break;}
		case 15:{*ptrSegCa=0x8E;break;}
		default:{*ptrSegCa=0xFF;break;}
	}
	usleep(100000);
}

int main()
{
    init_platform();
    //Test_leds();
    print("Hello World\n\r");
    while(1){
    	//sw2leds();
    	//cheniller();
    	sw2seg();
    }

    cleanup_platform();
    return 0;
}
